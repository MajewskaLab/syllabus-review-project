axis.text.x = element_text(size=10),
axis.text.y = element_text(size=12),
legend.text = element_text(size=12),
legend.title = element_text(size=12))+
scale_y_continuous(expand = c(0,0))+
scale_fill_manual(values = c("black","gray",'#a6cee3','#1f78b4','#e31a1c','#fdbf6f','#cab2d6','#ff7f00', "yellow"))
dev.off()
tiff("Fig4_tonesgrade.tiff",width=8,height=3,units="in",res=300)
df6 %>%
#filter(!is.na(SizeCategory)) %>%
ggplot(aes(x = GradeTone1, y = n, fill = GradeTone1))+
geom_bar(stat="identity", width =  0.5)+
theme_classic()+
labs(x = "Grading Policy Tone", y = "Count")+
theme(axis.text=element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size=10),
axis.text.y = element_text(size=12),
legend.text = element_text(size=12),
legend.title = element_text(size=12),   legend.position = "none")+
scale_y_continuous(expand = c(0,0))+
scale_fill_manual(values = c("black","gray",'#a6cee3','#1f78b4','#e31a1c','#fdbf6f','#cab2d6','#ff7f00', "yellow"))
dev.off()
<<<<<<< Updated upstream
setwd("C:/Users/majewska/Documents/GitHub/syllabus-review-project/syllabi")
# folder with 1000s of PDFs
dest <- "C:/Users/majewska/Documents/GitHub/syllabus-review-project/syllabi"
# make a vector of PDF file names
myfiles <- list.files(path = dest, pattern = "pdf",  full.names = TRUE)
setwd("C:/Program Files/Glyph & Cog/XpdfReader-win64")
# convert each PDF file that is named in the vector into a text file
# text file is created in the same directory as the PDFs
# note that my pdftotext.exe is in a different location to yours
lapply(myfiles, function(i) system(paste('"C:/Program Files/Glyph & Cog/XpdfReader-win64/pdftotext.exe"',
paste0('"', i, '"')), wait = FALSE) )
# convert each PDF file that is named in the vector into a text file
# text file is created in the same directory as the PDFs
# note that my pdftotext.exe is in a different location to yours
lapply(myfiles, function(i) system(paste('"C:/Program Files/Glyph & Cog/XpdfReader-win64/xpdf.exe"',
paste0('"', i, '"')), wait = FALSE) )
lapply(myfiles, function(i) system(paste('"C:/Program Files/Glyph & Cog/XpdfReader-win64/xpdf.exe"',
paste0('"', i, '"')), wait = FALSE) )
# set options
options(stringsAsFactors = F)          # no automatic data transformation
options("scipen" = 100, "digits" = 12) # suppress math annotation
# install packages
install.packages("pdftools")
install.packages("tesseract")
install.packages("tidyverse")
install.packages("here")
install.packages("hunspell")
install.packages("flextable")
# install klippy for copy-to-clipboard button in code chunks
install.packages("remotes")
remotes::install_github("rlesur/klippy")
# you can use an url or a path that leads to a pdf document
pdf_path <- "C:/Users/majewska/Documents/GitHub/syllabus-review-project/syllabi"
# activate klippy for copy-to-clipboard button
klippy::klippy()
# activate klippy for copy-to-clipboard button
klippy::klippy()
# activate klippy for copy-to-clipboard button
klippy::klippy()
# you can use an url or a path that leads to a pdf document
pdf_path <- "C:/Users/majewska/Documents/GitHub/syllabus-review-project/syllabi/data/PDFs"
# you can use an url or a path that leads to a pdf document
pdf_path <- "C:/Users/majewska/Documents/GitHub/syllabus-review-project/syllabi/data/PDFs"
# extract text
txt_output <- pdftools::pdf_text(pdf_path) %>%
paste0(collapse = " ") %>%
paste0(collapse = " ") %>%
stringr::str_squish()
# activate packages
library(pdftools)
library(tesseract)
library(tidyverse)
library(here)
library(hunspell)
# set tesseract engine
eng <- tesseract("eng")
# activate klippy for copy-to-clipboard button
klippy::klippy()
# you can use an url or a path that leads to a pdf document
pdf_path <- "C:/Users/majewska/Documents/GitHub/syllabus-review-project/syllabi/data/PDFs"
# extract text
txt_output <- pdftools::pdf_text(pdf_path) %>%
paste0(collapse = " ") %>%
paste0(collapse = " ") %>%
stringr::str_squish()
# folder with 1000s of PDFs
dest <- "C:/Users/majewska/Documents/GitHub/syllabus-review-project/syllabi/data/PDFs"
# folder with 1000s of PDFs
dest <- "C:/Users/majewska/Documents/GitHub/syllabus-review-project/syllabi/data/PDFs"
# make a vector of PDF file names
myfiles <- list.files(path = dest, pattern = "pdf",  full.names = TRUE)
lapply(myfiles, function(i) system(paste('"C:/Program Files/Glyph & Cog/bin64/pdftotext.exe"',
paste0('"', i, '"')), wait = FALSE) )
lapply(myfiles, function(i) system(paste('"C:\Program Files\Glyph & Cog\xpdf-tools-win-4.04\bin64\pdftotext.exe"',
lapply(myfiles, function(i) system(paste('"C:/Program Files/Glyph & Cog/xpdf-tools-win-4.04/bin64/pdftotext.exe"',
paste0('"', i, '"')), wait = FALSE) )
# folder with 1000s of PDFs
dest <- "C:/Users/majewska/Documents/GitHub/syllabus-review-project/syllabi/words/PDFs"
# make a vector of PDF file names
myfiles <- list.files(path = dest, pattern = "pdf",  full.names = TRUE)
# note that my pdftotext.exe is in a different location to yours
lapply(myfiles, function(i) system(paste('"C:/Program Files/Glyph & Cog/xpdf-tools-win-4.04/bin64/pdftotext.exe"',
=======
setwd("/Users/majewska/Documents/GitHub/syllabus-review-project/syllabi")
# folder with 1000s of PDFs
dest <- "/Users/majewska/Documents/GitHub/syllabus-review-project/syllabi"
# make a vector of PDF file names
myfiles <- list.files(path = dest, pattern = "pdf",  full.names = TRUE)
# make a vector of PDF file names
myfiles <- list.files(path = dest, pattern = "pdf",  full.names = TRUE)
library(pdftools)
install.packages("pdftools")
library(pdftools)
# you can use an url or a path
pdf_url <- "https://cran.r-project.org/web/packages/pdftools/pdftools.pdf"
list_output <- pdftools::pdf_text('https://cran.r-project.org/web/packages/pdftools/pdftools.pdf')
# you get an element by page
length(list_output) # 5 elements for a 5 page pdf
list_output <- pdftools::pdf_text('https://cran.r-project.org/web/packages/pdftools/pdftools.pdf')
library(pdftools)
# you can use an url or a path
pdf_url <- "https://cran.r-project.org/web/packages/pdftools/pdftools.pdf"
list_output <- pdftools::pdf_text('https://cran.r-project.org/web/packages/pdftools/pdftools.pdf')
# you get an element by page
length(list_output) # 5 elements for a 5 page pdf
setwd("/Users/majewska/Downloads/pdf2text_mac")
# folder with 1000s of PDFs
dest <- "/Users/majewska/Documents/GitHub/syllabus-review-project/syllabi"
# make a vector of PDF file names
myfiles <- list.files(path = dest, pattern = "pdf",  full.names = TRUE)
# convert each PDF file that is named in the vector into a text file
# text file is created in the same directory as the PDFs
# note that my pdftotext.exe is in a different location to yours
lapply(myfiles, function(i) system(paste('"/Users/majewska/Downloads/pdf2text_mac/pdftotext.exe"',
>>>>>>> Stashed changes
paste0('"', i, '"')), wait = FALSE) )
###clear all workspace
rm(list=ls())
graphics.off()
###
require(tidyverse)
#import data
syl <- read_csv("data/syllabus-data.csv")
ton <- read_csv("data/ValidtingTones.csv")
#import data
syl <- read_csv("data/syllabus-data.csv")
ton <- read_csv("data/ValidtingTones.csv")
ton <- read_csv("data/ValidatingTones.csv")
syl<-syl %>%
mutate(gradingtext = factor(Grading_File))
View(ton)
ton <- read_csv("data/ToneVal.csv")
syl <- syl %>%
mutate(gradingtext = factor(Grading_File))
ton <- ton %>%
mutate(gradingtext = factor(Statement))
source("C:/Users/majewska/Documents/GitHub/syllabus-review-project/R coding/05_validatingTones.R", echo=TRUE)
syl2 <- syl %>%
mutate(gradingtext = factor(Grading_File)) %>%
select(c("GradeTone1", "GradeTone1scale", "GradeTone2", "GradeTone2scale"))
View(ton)
ton <- read_csv("data/ToneVal.csv")
View(ton)
syl2 <- syl %>%
mutate(gradingtext = factor(Grading_File)) %>%
select(c("GradeTone1", "GradeTone1scale", "GradeTone2", "GradeTone2scale"))
ton <- ton %>%
mutate(gradingtext = factor(Statement))
View(ton)
ton2 <- ton %>%
mutate(gradingtext = factor(Statement)) %>%
group_by(gradingtext) %>%
count(tone1)
View(ton2)
ts <- left_join(ton2, syl2, by = "gradintext")
ts <- left_join(ton2, syl2, by = "gradingtext")
ts <- left_join(ton2, syl2, by = c("gradingtext"))
syl2 <- syl %>%
mutate(gradingtext = factor(Grading_File)) %>%
select(c("gradingtext","GradeTone1", "GradeTone1scale", "GradeTone2", "GradeTone2scale"))
ton2 <- ton %>%
mutate(gradingtext = factor(Statement)) %>%
group_by(gradingtext) %>%
count(tone1)
ts <- left_join(ton2, syl2, by = c("gradingtext"))
View(ts)
View(ton2)
ts <- left_join(ton2, syl2, by = c("gradingtext")) %>%
mutate(match = case_match(tone1,GradeTone1 ~ "match"))
View(ts)
ts <- left_join(ton2, syl2, by = c("gradingtext")) %>%
mutate(match = case_match(tone1,GradeTone1 ~ "match"), Prop = n/5)
View(ts)
ts <- left_join(ton2, syl2, by = c("gradingtext")) %>%
mutate(match = case_match(tone1,GradeTone1 ~ "match"), Prop = n/5) %>%
filter(match == "match")
View(ts)
hist(Prop)
hist(ts$Prop)
ton2 <- ton %>%
mutate(gradingtext = factor(Statement)) %>%
group_by(gradingtext) %>%
count(tone1, tone2)
View(ton2)
syl2 <- syl %>%
mutate(gradingtext = factor(Grading_File)) %>%
select(c("gradingtext","GradeTone1", "GradeTone1scale", "GradeTone2", "GradeTone2scale"))
ton1 <- ton %>%
mutate(gradingtext = factor(Statement)) %>%
group_by(gradingtext) %>%
count(tone1)
ts <- left_join(ton1, syl2, by = c("gradingtext")) %>%
mutate(match = case_match(tone1,GradeTone1 ~ "match"), Prop = n/5) %>%
filter(match == "match")
ton2 <- ton %>%
mutate(gradingtext = factor(Statement)) %>%
group_by(gradingtext) %>%
count(tone2)
ts <- left_join(ton2, syl2, by = c("gradingtext")) %>%
mutate(match = case_match(tone2,GradeTone1 ~ "match"), Prop = n/5) %>%
filter(match == "match")
syl2 <- syl %>%
mutate(gradingtext = factor(Grading_File)) %>%
select(c("gradingtext","GradeTone1", "GradeTone1scale", "GradeTone2", "GradeTone2scale"))
ton1 <- ton %>%
mutate(gradingtext = factor(Statement)) %>%
group_by(gradingtext) %>%
count(tone1)
ts <- left_join(ton1, syl2, by = c("gradingtext")) %>%
mutate(match = case_match(tone1,GradeTone1 ~ "match"), Prop = n/5) %>%
filter(match == "match")
ton2 <- ton %>%
mutate(gradingtext = factor(Statement)) %>%
group_by(gradingtext) %>%
count(tone2)
ts2 <- left_join(ton2, syl2, by = c("gradingtext")) %>%
mutate(match = case_match(tone2,GradeTone1 ~ "match"), Prop = n/5) %>%
filter(match == "match")
ts2 <- left_join(ton2, syl2, by = c("gradingtext")) %>%
mutate(match = case_match(tone2,GradeTone1 ~ "match"), Prop2 = n/5) %>%
filter(match == "match")
hist(ts2$tone2)
hist(ts2$Prop2)
View(syl2)
#import data
syl <- read_csv("data/syllabus-data.csv")
View(syl)
ton <- read_csv("data/ToneVal.csv")
View(ton)
170/5
syl2 <- syl %>%
mutate(gradingtext = factor(Grading_File)) %>%
select(c("gradingtext","GradeTone1", "GradeTone1scale", "GradeTone2", "GradeTone2scale"))
View(syl2)
ton1 <- ton %>%
mutate(gradingtext = factor(Statement)) %>%
group_by(gradingtext) %>%
count(tone1)
ts <- left_join(ton1, syl2, by = c("gradingtext")) %>%
mutate(match = case_match(tone1,GradeTone1 ~ "match"), Prop = n/5) %>%
filter(match == "match")
ton2 <- ton %>%
mutate(gradingtext = factor(Statement)) %>%
group_by(gradingtext) %>%
count(tone2)
ts2 <- left_join(ton2, syl2, by = c("gradingtext")) %>%
mutate(match = case_match(tone2,GradeTone1 ~ "match"), Prop2 = n/5) %>%
filter(match == "match")
hist(ts2$Prop2)
hist(ts$Prop)
hist(ts2$Prop2)
ton1pos <- ton %>%
mutate(gradingtext = factor(Statement)) %>%
group_by(gradingtext) %>%
summarize(posit= mean(`positivity rating`))
View(ton1pos)
ton1pos <- ton %>%
mutate(gradingtext = factor(Statement)) %>%
group_by(gradingtext) %>%
summarize(posit= mean(`positivity rating`), posmedian = median(`positivity rating`))
View(ton1pos)
ts %>%
ggplot(data, aes(x=Prop)) +
geom_histogram()
ts %>%
ggplot(aes(x=Prop)) +
geom_histogram()
ts2 %>%
ggplot(aes(x=Prop2)) +
geom_histogram()
ts %>%
ggplot(aes(x=Prop)) +
geom_histogram(binwidth=3, fill="#69b3a2", color="#e9ecef", alpha=0.9)
ts %>%
ggplot(aes(x=Prop)) +
geom_histogram(binwidth=.1, fill="#69b3a2", color="#e9ecef", alpha=0.9)
ts %>%
ggplot(aes(x=Prop)) +
geom_histogram(binwidth=.1, fill="#69b3a2", color="#e9ecef", alpha=0.9)+
theme_ipsum()
library(hrbrthemes)
install.packages("hrbrthemes")
library(hrbrthemes)
ts %>%
ggplot(aes(x=Prop)) +
geom_histogram(binwidth=.1, fill="#69b3a2", color="#e9ecef", alpha=0.9)+
theme_ipsum()
ts %>%
ggplot(aes(x=Prop)) +
geom_histogram(binwidth=.1, fill="#69b3a2", color="#e9ecef", alpha=0.9)+
theme_classic()
ts %>%
ggplot(aes(x=Prop)) +
geom_histogram(binwidth=.1, fill="#69b3a2", color="#e9ecef", alpha=0.9)+
theme_classic()+
scale_y_continuous(expand = c(0,0))
ts2 %>%
ggplot(aes(x=Prop2)) +
geom_histogram(binwidth=.1, fill="#70b3a2", color="#e9ecef", alpha=0.9)+
theme_classic()+
scale_y_continuous(expand = c(0,0))
ts2 %>%
ggplot(aes(x=Prop2)) +
geom_histogram(binwidth=.1, fill="#71b3a2", color="#e9ecef", alpha=0.9)+
theme_classic()+
scale_y_continuous(expand = c(0,0))
ts2 %>%
ggplot(aes(x=Prop2)) +
geom_histogram(binwidth=.1, fill="orange", color="#e9ecef", alpha=0.9)+
theme_classic()+
scale_y_continuous(expand = c(0,0))
ts2 %>%
ggplot(aes(x=Prop2)) +
geom_histogram(binwidth=.1, fill="orange", color="#e9ecef", alpha=0.9)+
ggtitle("Tone 2") +
theme_classic()+
scale_y_continuous(expand = c(0,0))
ts %>%
ggplot(aes(x=Prop)) +
geom_histogram(binwidth=.1, fill="#69b3a2", color="#e9ecef", alpha=0.9)+
ggtitle("Tone 1") +
theme_classic()+
scale_y_continuous(expand = c(0,0))
ts2 %>%
ggplot(aes(x=Prop2)) +
geom_histogram(binwidth=.1, fill="orange", color="#e9ecef", alpha=0.9)+
ggtitle("Tone 2") +
theme_classic()+
scale_y_continuous(expand = c(0,0))
ts %>%
ggplot(aes(x=Prop)) +
geom_histogram(binwidth=.1, fill="#69b3a2", color="#e9ecef", alpha=0.9)+
ggtitle("Tone 1") +
theme_classic()+
scale_y_continuous(expand = c(0,0))
library(readr)
enrollment <- read_csv("data/enrollment.csv")
View(enrollment)
###clear all work space
rm(list=ls())
graphics.off()
###
require(tidyverse)
syl <- read_csv("data/syllabus-data.csv")
a_SA <- read_csv("data/updated_attendance_SA.csv")
g_SA <- read_csv("data/updated_grading_SA.csv")
g_LIWC <- read_csv("data/updated_grading_LIWC.csv")
a_LIWC <- read_csv("data/updated_attend_LIWC.csv")
g_wordcount <- read_csv("data/updated_grading_wordcount.csv")
a_wordcount <- read_csv("data/updated_attendance_wordcount.csv")
rank <- read_csv("data/rank.csv")
enroll <- read_csv("data/enrollment.csv")
View(a_LIWC)
View(syl)
View(syl)
View(a_SA)
syl<-left_join(syl, a_SA, by = c("Attend_File" = "File"))
View(syl)
a_SA <- read_csv("data/updated_attendance_SA.csv") %>%
rename("AttendPolarity" = "Polarity")
a_SA <- read_csv("data/updated_attendance_SA.csv") %>%
rename("AttendPolarity" = "Polarity", "AttendSubjectivity"= "Subjectivity")
a_SA <- read_csv("data/updated_attendance_SA.csv") %>%
rename("AttendPolarity" = "Polarity", "AttendSubjectivity"= "Subjectivity")
g_SA <- read_csv("data/updated_grading_SA.csv") %>%
rename("GradingPolarity" = "Polarity", "GradingSubjectivity" = "Subjectivity")
syl <- read_csv("data/syllabus-data.csv")
syl2<-left_join(syl, a_SA, by = c("Attend_File" = "File")) %>%
left_join(g_SA, by = c("Grading_File" = "File"))
View(syl2)
colnames(g_LIWC) <- paste("Attend_")
colnames(g_LIWC)
g_LIWC <- read_csv("data/updated_grading_LIWC.csv")
colnames(g_LIWC)
colnames(g_LIWC) <- paste("Attend_", colnames((g_LIWC)))
View(g_LIWC)
g_LIWC <- read_csv("data/updated_grading_LIWC.csv")
colnames(g_LIWC) <- paste("Grade_", colnames((g_LIWC)))
a_LIWC <- read_csv("data/updated_attend_LIWC.csv")
colnames(a_LIWC) <- paste("Attend_", colnames((a_LIWC)))
View(g_SA)
View(g_wordcount)
View(g_LIWC)
syl2<-left_join(syl, a_SA, by = c("Attend_File" = "File")) %>%
left_join(g_SA, by = c("Grading_File" = "File")) %>%
left_join(a_SA, by = c("Attend_File" = "File"))
View(syl2)
colnames(g_LIWC) <- paste("Grade_", colnames(g_LIWC), sep = "")
syl <- read_csv("data/syllabus-data.csv")
a_SA <- read_csv("data/updated_attendance_SA.csv") %>%
rename("AttendPolarity" = "Polarity", "AttendSubjectivity"= "Subjectivity")
g_SA <- read_csv("data/updated_grading_SA.csv") %>%
rename("GradingPolarity" = "Polarity", "GradingSubjectivity" = "Subjectivity")
g_LIWC <- read_csv("data/updated_grading_LIWC.csv")
colnames(g_LIWC) <- paste("Grade_", colnames(g_LIWC), sep = "")
a_LIWC <- read_csv("data/updated_attend_LIWC.csv")
colnames(a_LIWC) <- paste("Attend_", colnames((a_LIWC)), sep = "")
View(rank)
View(enroll)
enroll <- read_csv("data/enrollment.csv") %>%
select(c(Index, `Class Size`))
enroll <- read_csv("data/enrollment.csv")
rank <- read_csv("data/rank.csv") %>%
select(c(Index, Lead_Instructor, Lead_Rank, Other_Rank))
enroll <- read_csv("data/enrollment.csv") %>%
select(c(Index, `Class Size`))
syl2<-left_join(syl, a_SA, by = c("Attend_File" = "File")) %>%
left_join(g_SA, by = c("Grading_File" = "File")) %>%
left_join(a_SA, by = c("Attend_File" = "File")) %>%
left_join(g_LIWC, by = c("Grading_File" = "Grade_Filename")) %>%
left_join(a_LIWC, by = c("Attend_File" = "Attend_Filename")) %>%
left_join(rank, by = c("Index")) %>%
left_join(enroll, by = c("Index"))
View(syl2)
###clear all work space
rm(list=ls())
graphics.off()
###
require(tidyverse)
syl <- read_csv("data/syllabus-data.csv")
a_SA <- read_csv("data/updated_attendance_SA.csv") %>%
rename("AttendPolarity" = "Polarity", "AttendSubjectivity"= "Subjectivity")
g_SA <- read_csv("data/updated_grading_SA.csv") %>%
rename("GradingPolarity" = "Polarity", "GradingSubjectivity" = "Subjectivity")
g_LIWC <- read_csv("data/updated_grading_LIWC.csv")
colnames(g_LIWC) <- paste("Grade_", colnames(g_LIWC), sep = "")
a_LIWC <- read_csv("data/updated_attend_LIWC.csv")
colnames(a_LIWC) <- paste("Attend_", colnames((a_LIWC)), sep = "")
#g_wordcount <- read_csv("data/updated_grading_wordcount.csv")
#a_wordcount <- read_csv("data/updated_attendance_wordcount.csv")
rank <- read_csv("data/rank.csv") %>%
select(c(Index, Lead_Instructor, Lead_Rank, Other_Rank))
enroll <- read_csv("data/enrollment.csv") %>%
select(c(Index, `Class Size`))
syl2<-left_join(syl, a_SA, by = c("Attend_File" = "File")) %>%
left_join(g_SA, by = c("Grading_File" = "File")) %>%
left_join(a_SA, by = c("Attend_File" = "File")) %>%
left_join(g_LIWC, by = c("Grading_File" = "Grade_Filename")) %>%
left_join(a_LIWC, by = c("Attend_File" = "Attend_Filename")) %>%
left_join(rank, by = c("Index")) %>%
left_join(enroll, by = c("Index"))
View(syl2)
syl2<-left_join(syl, a_SA, by = c("Attend_File" = "File")) %>%
left_join(g_SA, by = c("Grading_File" = "File")) %>%
left_join(g_LIWC, by = c("Grading_File" = "Grade_Filename")) %>%
left_join(a_LIWC, by = c("Attend_File" = "Attend_Filename")) %>%
left_join(rank, by = c("Index")) %>%
left_join(enroll, by = c("Index"))
View(syl2)
syl2 <- left_join(syl, rank, by = c("Index") %>%
syl2 <- left_join(syl, rank, by = c("Index")) %>%
left_join(enroll, by = c("Index")) %>%
left_join(a_SA, by = c("Attend_File" = "File")) %>%
left_join(g_SA, by = c("Grading_File" = "File")) %>%
left_join(g_LIWC, by = c("Grading_File" = "Grade_Filename")) %>%
left_join(a_LIWC, by = c("Attend_File" = "Attend_Filename"))
View(syl2)
View(syl2)
###clear all work space
rm(list=ls())
graphics.off()
###
require(tidyverse)
syl <- read_csv("data/syllabus-data.csv")
a_SA <- read_csv("data/updated_attendance_SA.csv") %>%
rename("AttendPolarity" = "Polarity", "AttendSubjectivity"= "Subjectivity")
g_SA <- read_csv("data/updated_grading_SA.csv") %>%
rename("GradingPolarity" = "Polarity", "GradingSubjectivity" = "Subjectivity")
g_LIWC <- read_csv("data/updated_grading_LIWC.csv")
colnames(g_LIWC) <- paste("Grade_", colnames(g_LIWC), sep = "")
a_LIWC <- read_csv("data/updated_attend_LIWC.csv")
colnames(a_LIWC) <- paste("Attend_", colnames((a_LIWC)), sep = "")
#g_wordcount <- read_csv("data/updated_grading_wordcount.csv")
#a_wordcount <- read_csv("data/updated_attendance_wordcount.csv")
rank <- read_csv("data/rank.csv") %>%
select(c(Index, Lead_Instructor, Lead_Rank, Other_Rank))
enroll <- read_csv("data/enrollment.csv") %>%
select(c(Index, `Class Size`))
########## merges #
syl2 <- left_join(syl, rank, by = c("Index")) %>%
left_join(enroll, by = c("Index")) %>%
left_join(a_SA, by = c("Attend_File" = "File")) %>%
left_join(g_SA, by = c("Grading_File" = "File")) %>%
left_join(g_LIWC, by = c("Grading_File" = "Grade_Filename")) %>%
left_join(a_LIWC, by = c("Attend_File" = "Attend_Filename"))
View(syl2)
write.csv(syl2, "data/masterDF.csv")
